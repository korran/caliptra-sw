// Generated by PeakRDL-regblock - A free and open-source SystemVerilog generator
//  https://github.com/SystemRDL/PeakRDL-regblock

module caliptra_fpga_sync_regs (
        input wire clk,
        input wire rst,

        axi4lite_intf.slave s_axil,

        input caliptra_fpga_sync_regs_pkg::caliptra_fpga_sync_regs__in_t hwif_in,
        output caliptra_fpga_sync_regs_pkg::caliptra_fpga_sync_regs__out_t hwif_out
    );

    //--------------------------------------------------------------------------
    // CPU Bus interface logic
    //--------------------------------------------------------------------------
    logic cpuif_req;
    logic cpuif_req_is_wr;
    logic [16:0] cpuif_addr;
    logic [63:0] cpuif_wr_data;
    logic [63:0] cpuif_wr_biten;
    logic cpuif_req_stall_wr;
    logic cpuif_req_stall_rd;

    logic cpuif_rd_ack;
    logic cpuif_rd_err;
    logic [63:0] cpuif_rd_data;

    logic cpuif_wr_ack;
    logic cpuif_wr_err;

    // Max Outstanding Transactions: 2
    logic [1:0] axil_n_in_flight;
    logic axil_prev_was_rd;
    logic axil_arvalid;
    logic [16:0] axil_araddr;
    logic axil_ar_accept;
    logic axil_awvalid;
    logic [16:0] axil_awaddr;
    logic axil_wvalid;
    logic [63:0] axil_wdata;
    logic [7:0] axil_wstrb;
    logic axil_aw_accept;
    logic axil_resp_acked;

    // Transaction request accpetance
    always_ff @(posedge clk) begin
        if(rst) begin
            axil_prev_was_rd <= '0;
            axil_arvalid <= '0;
            axil_araddr <= '0;
            axil_awvalid <= '0;
            axil_awaddr <= '0;
            axil_wvalid <= '0;
            axil_wdata <= '0;
            axil_wstrb <= '0;
            axil_n_in_flight <= '0;
        end else begin
            // AR* acceptance register
            if(axil_ar_accept) begin
                axil_prev_was_rd <= '1;
                axil_arvalid <= '0;
            end
            if(s_axil.ARVALID && s_axil.ARREADY) begin
                axil_arvalid <= '1;
                axil_araddr <= s_axil.ARADDR;
            end

            // AW* & W* acceptance registers
            if(axil_aw_accept) begin
                axil_prev_was_rd <= '0;
                axil_awvalid <= '0;
                axil_wvalid <= '0;
            end
            if(s_axil.AWVALID && s_axil.AWREADY) begin
                axil_awvalid <= '1;
                axil_awaddr <= s_axil.AWADDR;
            end
            if(s_axil.WVALID && s_axil.WREADY) begin
                axil_wvalid <= '1;
                axil_wdata <= s_axil.WDATA;
                axil_wstrb <= s_axil.WSTRB;
            end

            // Keep track of in-flight transactions
            if((axil_ar_accept || axil_aw_accept) && !axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight + 1'b1;
            end else if(!(axil_ar_accept || axil_aw_accept) && axil_resp_acked) begin
                axil_n_in_flight <= axil_n_in_flight - 1'b1;
            end
        end
    end

    always_comb begin
        s_axil.ARREADY = (!axil_arvalid || axil_ar_accept);
        s_axil.AWREADY = (!axil_awvalid || axil_aw_accept);
        s_axil.WREADY = (!axil_wvalid || axil_aw_accept);
    end

    // Request dispatch
    always_comb begin
        cpuif_wr_data = axil_wdata;
        for(int i=0; i<8; i++) begin
            cpuif_wr_biten[i*8 +: 8] = {8{axil_wstrb[i]}};
        end
        cpuif_req = '0;
        cpuif_req_is_wr = '0;
        cpuif_addr = '0;
        axil_ar_accept = '0;
        axil_aw_accept = '0;

        if(axil_n_in_flight < 2'd2) begin
            // Can safely issue more transactions without overwhelming response buffer
            if(axil_arvalid && !axil_prev_was_rd) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[16:3], 3'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end else if(axil_awvalid && axil_wvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '1;
                cpuif_addr = {axil_awaddr[16:3], 3'b0};
                if(!cpuif_req_stall_wr) axil_aw_accept = '1;
            end else if(axil_arvalid) begin
                cpuif_req = '1;
                cpuif_req_is_wr = '0;
                cpuif_addr = {axil_araddr[16:3], 3'b0};
                if(!cpuif_req_stall_rd) axil_ar_accept = '1;
            end
        end
    end


    // AXI4-Lite Response Logic
    struct {
        logic is_wr;
        logic err;
        logic [63:0] rdata;
    } axil_resp_buffer[2];

    logic [1:0] axil_resp_wptr;
    logic [1:0] axil_resp_rptr;

    always_ff @(posedge clk) begin
        if(rst) begin
            for(int i=0; i<2; i++) begin
                axil_resp_buffer[i].is_wr <= '0;
                axil_resp_buffer[i].err <= '0;
                axil_resp_buffer[i].rdata <= '0;
            end
            axil_resp_wptr <= '0;
            axil_resp_rptr <= '0;
        end else begin
            // Store responses in buffer until AXI response channel accepts them
            if(cpuif_rd_ack || cpuif_wr_ack) begin
                if(cpuif_rd_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '0;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_rd_err;
                    axil_resp_buffer[axil_resp_wptr[0:0]].rdata <= cpuif_rd_data;

                end else if(cpuif_wr_ack) begin
                    axil_resp_buffer[axil_resp_wptr[0:0]].is_wr <= '1;
                    axil_resp_buffer[axil_resp_wptr[0:0]].err <= cpuif_wr_err;
                end
                axil_resp_wptr <= axil_resp_wptr + 1'b1;
            end

            // Advance read pointer when acknowledged
            if(axil_resp_acked) begin
                axil_resp_rptr <= axil_resp_rptr + 1'b1;
            end
        end
    end

    always_comb begin
        axil_resp_acked = '0;
        s_axil.BVALID = '0;
        s_axil.RVALID = '0;
        if(axil_resp_rptr != axil_resp_wptr) begin
            if(axil_resp_buffer[axil_resp_rptr[0:0]].is_wr) begin
                s_axil.BVALID = '1;
                if(s_axil.BREADY) axil_resp_acked = '1;
            end else begin
                s_axil.RVALID = '1;
                if(s_axil.RREADY) axil_resp_acked = '1;
            end
        end

        s_axil.RDATA = axil_resp_buffer[axil_resp_rptr[0:0]].rdata;
        if(axil_resp_buffer[axil_resp_rptr[0:0]].err) begin
            s_axil.BRESP = 2'b10;
            s_axil.RRESP = 2'b10;
        end else begin
            s_axil.BRESP = 2'b00;
            s_axil.RRESP = 2'b00;
        end
    end

    logic cpuif_req_masked;
    logic external_req;
    logic external_pending;
    logic external_wr_ack;
    logic external_rd_ack;
    always_ff @(posedge clk) begin
        if(rst) begin
            external_pending <= '0;
        end else begin
            if(external_req & ~external_wr_ack & ~external_rd_ack) external_pending <= '1;
            else if(external_wr_ack | external_rd_ack) external_pending <= '0;
            assert(!external_wr_ack || (external_pending | external_req))
                else $error("An external wr_ack strobe was asserted when no external request was active");
            assert(!external_rd_ack || (external_pending | external_req))
                else $error("An external rd_ack strobe was asserted when no external request was active");
        end
    end

    // Read & write latencies are balanced. Stalls not required
    // except if external
    assign cpuif_req_stall_rd = external_pending;
    assign cpuif_req_stall_wr = external_pending;
    assign cpuif_req_masked = cpuif_req
                            & !(!cpuif_req_is_wr & cpuif_req_stall_rd)
                            & !(cpuif_req_is_wr & cpuif_req_stall_wr);

    //--------------------------------------------------------------------------
    // Address Decode
    //--------------------------------------------------------------------------
    typedef struct {
        logic apb_in0;
        logic apb_in1;
        logic apb_out;
        logic jtag_in;
        logic jtag_out;
        logic generic_input_wires;
        logic generic_output_wires;
        logic cptra_obf_key[4];
        logic control;
        logic status;
        logic trng_in;
        logic trng_out;
        logic clock_control;
        logic counter;
        logic rom_mem;
    } decoded_reg_strb_t;
    decoded_reg_strb_t decoded_reg_strb;
    logic decoded_strb_is_external;

    logic [16:0] decoded_addr;

    logic decoded_req;
    logic decoded_req_is_wr;
    logic [63:0] decoded_wr_data;
    logic [63:0] decoded_wr_biten;

    always_comb begin
        automatic logic is_external = '0;
    
        decoded_reg_strb.apb_in0 = cpuif_req_masked & (cpuif_addr == 17'h0);
        decoded_reg_strb.apb_in1 = cpuif_req_masked & (cpuif_addr == 17'h8);
        decoded_reg_strb.apb_out = cpuif_req_masked & (cpuif_addr == 17'h10);
        decoded_reg_strb.jtag_in = cpuif_req_masked & (cpuif_addr == 17'h18);
        decoded_reg_strb.jtag_out = cpuif_req_masked & (cpuif_addr == 17'h20);
        decoded_reg_strb.generic_input_wires = cpuif_req_masked & (cpuif_addr == 17'h28);
        decoded_reg_strb.generic_output_wires = cpuif_req_masked & (cpuif_addr == 17'h30);
        for(int i0=0; i0<4; i0++) begin
            decoded_reg_strb.cptra_obf_key[i0] = cpuif_req_masked & (cpuif_addr == 17'h38 + i0*17'h8);
        end
        decoded_reg_strb.control = cpuif_req_masked & (cpuif_addr == 17'h58);
        decoded_reg_strb.status = cpuif_req_masked & (cpuif_addr == 17'h60);
        decoded_reg_strb.trng_in = cpuif_req_masked & (cpuif_addr == 17'h68);
        decoded_reg_strb.trng_out = cpuif_req_masked & (cpuif_addr == 17'h70);
        decoded_reg_strb.clock_control = cpuif_req_masked & (cpuif_addr == 17'h78);
        decoded_reg_strb.counter = cpuif_req_masked & (cpuif_addr == 17'h80);
        decoded_reg_strb.rom_mem = cpuif_req_masked & (cpuif_addr >= 17'h10000) & (cpuif_addr <= 17'h10000 + 17'hbfff);
        is_external |= cpuif_req_masked & (cpuif_addr >= 17'h10000) & (cpuif_addr <= 17'h10000 + 17'hbfff);
        decoded_strb_is_external = is_external;
        external_req = is_external;
    
    end

    // Pass down signals to next stage
    assign decoded_addr = cpuif_addr;

    assign decoded_req = cpuif_req_masked;
    assign decoded_req_is_wr = cpuif_req_is_wr;
    assign decoded_wr_data = cpuif_wr_data;
    assign decoded_wr_biten = cpuif_wr_biten;

    //--------------------------------------------------------------------------
    // Field logic
    //--------------------------------------------------------------------------
    typedef struct {
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } pdata;
            struct {
                logic [31:0] next;
                logic load_next;
            } paddr;
        } apb_in0;
        struct {
            struct {
                logic next;
                logic load_next;
            } psel;
            struct {
                logic next;
                logic load_next;
            } penable;
            struct {
                logic next;
                logic load_next;
            } pwrite;
            struct {
                logic [2:0] next;
                logic load_next;
            } pprot;
            struct {
                logic [31:0] next;
                logic load_next;
            } pauser;
        } apb_in1;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } pdata;
            struct {
                logic next;
                logic load_next;
            } pready;
            struct {
                logic next;
                logic load_next;
            } pslverr;
        } apb_out;
        struct {
            struct {
                logic next;
                logic load_next;
            } tck;
            struct {
                logic next;
                logic load_next;
            } tms;
            struct {
                logic next;
                logic load_next;
            } tdi;
            struct {
                logic next;
                logic load_next;
            } trst_n;
        } jtag_in;
        struct {
            struct {
                logic next;
                logic load_next;
            } tdo;
        } jtag_out;
        struct {
            struct {
                logic [63:0] next;
                logic load_next;
            } value;
        } generic_input_wires;
        struct {
            struct {
                logic [63:0] next;
                logic load_next;
            } value;
        } generic_output_wires;
        struct {
            struct {
                logic [63:0] next;
                logic load_next;
            } value;
        } cptra_obf_key[4];
        struct {
            struct {
                logic next;
                logic load_next;
            } cptra_pwrgood;
            struct {
                logic next;
                logic load_next;
            } cptra_rst_b;
            struct {
                logic next;
                logic load_next;
            } ss_debug_locked;
            struct {
                logic [1:0] next;
                logic load_next;
            } ss_device_lifecycle;
            struct {
                logic next;
                logic load_next;
            } scan_mode;
            struct {
                logic next;
                logic load_next;
            } bootfsm_brkpoint;
        } control;
        struct {
            struct {
                logic next;
                logic load_next;
            } cptra_error_fatal;
            struct {
                logic next;
                logic load_next;
            } cptra_error_non_fatal;
            struct {
                logic next;
                logic load_next;
            } ready_for_fuses;
            struct {
                logic next;
                logic load_next;
            } ready_for_fw_push;
            struct {
                logic next;
                logic load_next;
            } ready_for_runtime;
            struct {
                logic next;
                logic load_next;
            } mailbox_data_avail;
            struct {
                logic next;
                logic load_next;
            } mailbox_flow_done;
        } status;
        struct {
            struct {
                logic [3:0] next;
                logic load_next;
            } itrng_data;
            struct {
                logic next;
                logic load_next;
            } itrng_valid;
        } trng_in;
        struct {
            struct {
                logic next;
                logic load_next;
            } etrng_req;
        } trng_out;
        struct {
            struct {
                logic [31:0] next;
                logic load_next;
            } cycle_count;
            struct {
                logic next;
                logic load_next;
            } go;
            struct {
                logic next;
                logic load_next;
            } bkpt_generic_output_wires;
            struct {
                logic next;
                logic load_next;
            } bkpt_mailbox_data_avail;
            struct {
                logic next;
                logic load_next;
            } bkpt_mailbox_flow_done;
            struct {
                logic next;
                logic load_next;
            } bkpt_etrng_req;
        } clock_control;
        struct {
            struct {
                logic [63:0] next;
                logic load_next;
            } counter;
        } counter;
    } field_combo_t;
    field_combo_t field_combo;

    typedef struct {
        struct {
            struct {
                logic [31:0] value;
            } pdata;
            struct {
                logic [31:0] value;
            } paddr;
        } apb_in0;
        struct {
            struct {
                logic value;
            } psel;
            struct {
                logic value;
            } penable;
            struct {
                logic value;
            } pwrite;
            struct {
                logic [2:0] value;
            } pprot;
            struct {
                logic [31:0] value;
            } pauser;
        } apb_in1;
        struct {
            struct {
                logic [31:0] value;
            } pdata;
            struct {
                logic value;
            } pready;
            struct {
                logic value;
            } pslverr;
        } apb_out;
        struct {
            struct {
                logic value;
            } tck;
            struct {
                logic value;
            } tms;
            struct {
                logic value;
            } tdi;
            struct {
                logic value;
            } trst_n;
        } jtag_in;
        struct {
            struct {
                logic value;
            } tdo;
        } jtag_out;
        struct {
            struct {
                logic [63:0] value;
            } value;
        } generic_input_wires;
        struct {
            struct {
                logic [63:0] value;
            } value;
        } generic_output_wires;
        struct {
            struct {
                logic [63:0] value;
            } value;
        } cptra_obf_key[4];
        struct {
            struct {
                logic value;
            } cptra_pwrgood;
            struct {
                logic value;
            } cptra_rst_b;
            struct {
                logic value;
            } ss_debug_locked;
            struct {
                logic [1:0] value;
            } ss_device_lifecycle;
            struct {
                logic value;
            } scan_mode;
            struct {
                logic value;
            } bootfsm_brkpoint;
        } control;
        struct {
            struct {
                logic value;
            } cptra_error_fatal;
            struct {
                logic value;
            } cptra_error_non_fatal;
            struct {
                logic value;
            } ready_for_fuses;
            struct {
                logic value;
            } ready_for_fw_push;
            struct {
                logic value;
            } ready_for_runtime;
            struct {
                logic value;
            } mailbox_data_avail;
            struct {
                logic value;
            } mailbox_flow_done;
        } status;
        struct {
            struct {
                logic [3:0] value;
            } itrng_data;
            struct {
                logic value;
            } itrng_valid;
        } trng_in;
        struct {
            struct {
                logic value;
            } etrng_req;
        } trng_out;
        struct {
            struct {
                logic [31:0] value;
            } cycle_count;
            struct {
                logic value;
            } go;
            struct {
                logic value;
            } bkpt_generic_output_wires;
            struct {
                logic value;
            } bkpt_mailbox_data_avail;
            struct {
                logic value;
            } bkpt_mailbox_flow_done;
            struct {
                logic value;
            } bkpt_etrng_req;
        } clock_control;
        struct {
            struct {
                logic [63:0] value;
            } counter;
        } counter;
    } field_storage_t;
    field_storage_t field_storage;

    // Field: caliptra_fpga_sync_regs.apb_in0.pdata
    always_comb begin
        automatic logic [31:0] next_c = field_storage.apb_in0.pdata.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in0.pdata.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end
        field_combo.apb_in0.pdata.next = next_c;
        field_combo.apb_in0.pdata.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in0.pdata.value <= 32'h0;
        end else if(field_combo.apb_in0.pdata.load_next) begin
            field_storage.apb_in0.pdata.value <= field_combo.apb_in0.pdata.next;
        end
    end
    assign hwif_out.apb_in0.pdata.value = field_storage.apb_in0.pdata.value;
    // Field: caliptra_fpga_sync_regs.apb_in0.paddr
    always_comb begin
        automatic logic [31:0] next_c = field_storage.apb_in0.paddr.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in0 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in0.paddr.value & ~decoded_wr_biten[63:32]) | (decoded_wr_data[63:32] & decoded_wr_biten[63:32]);
            load_next_c = '1;
        end
        field_combo.apb_in0.paddr.next = next_c;
        field_combo.apb_in0.paddr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in0.paddr.value <= 32'h0;
        end else if(field_combo.apb_in0.paddr.load_next) begin
            field_storage.apb_in0.paddr.value <= field_combo.apb_in0.paddr.next;
        end
    end
    assign hwif_out.apb_in0.paddr.value = field_storage.apb_in0.paddr.value;
    // Field: caliptra_fpga_sync_regs.apb_in1.psel
    always_comb begin
        automatic logic [0:0] next_c = field_storage.apb_in1.psel.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in1.psel.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.apb_in1.psel.next = next_c;
        field_combo.apb_in1.psel.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in1.psel.value <= 1'h0;
        end else if(field_combo.apb_in1.psel.load_next) begin
            field_storage.apb_in1.psel.value <= field_combo.apb_in1.psel.next;
        end
    end
    assign hwif_out.apb_in1.psel.value = field_storage.apb_in1.psel.value;
    // Field: caliptra_fpga_sync_regs.apb_in1.penable
    always_comb begin
        automatic logic [0:0] next_c = field_storage.apb_in1.penable.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in1.penable.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.apb_in1.penable.next = next_c;
        field_combo.apb_in1.penable.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in1.penable.value <= 1'h0;
        end else if(field_combo.apb_in1.penable.load_next) begin
            field_storage.apb_in1.penable.value <= field_combo.apb_in1.penable.next;
        end
    end
    assign hwif_out.apb_in1.penable.value = field_storage.apb_in1.penable.value;
    // Field: caliptra_fpga_sync_regs.apb_in1.pwrite
    always_comb begin
        automatic logic [0:0] next_c = field_storage.apb_in1.pwrite.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in1.pwrite.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.apb_in1.pwrite.next = next_c;
        field_combo.apb_in1.pwrite.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in1.pwrite.value <= 1'h0;
        end else if(field_combo.apb_in1.pwrite.load_next) begin
            field_storage.apb_in1.pwrite.value <= field_combo.apb_in1.pwrite.next;
        end
    end
    assign hwif_out.apb_in1.pwrite.value = field_storage.apb_in1.pwrite.value;
    // Field: caliptra_fpga_sync_regs.apb_in1.pprot
    always_comb begin
        automatic logic [2:0] next_c = field_storage.apb_in1.pprot.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in1.pprot.value & ~decoded_wr_biten[5:3]) | (decoded_wr_data[5:3] & decoded_wr_biten[5:3]);
            load_next_c = '1;
        end
        field_combo.apb_in1.pprot.next = next_c;
        field_combo.apb_in1.pprot.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in1.pprot.value <= 3'h0;
        end else if(field_combo.apb_in1.pprot.load_next) begin
            field_storage.apb_in1.pprot.value <= field_combo.apb_in1.pprot.next;
        end
    end
    assign hwif_out.apb_in1.pprot.value = field_storage.apb_in1.pprot.value;
    // Field: caliptra_fpga_sync_regs.apb_in1.pauser
    always_comb begin
        automatic logic [31:0] next_c = field_storage.apb_in1.pauser.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.apb_in1 && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.apb_in1.pauser.value & ~decoded_wr_biten[63:32]) | (decoded_wr_data[63:32] & decoded_wr_biten[63:32]);
            load_next_c = '1;
        end
        field_combo.apb_in1.pauser.next = next_c;
        field_combo.apb_in1.pauser.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_in1.pauser.value <= 32'h0;
        end else if(field_combo.apb_in1.pauser.load_next) begin
            field_storage.apb_in1.pauser.value <= field_combo.apb_in1.pauser.next;
        end
    end
    assign hwif_out.apb_in1.pauser.value = field_storage.apb_in1.pauser.value;
    // Field: caliptra_fpga_sync_regs.apb_out.pdata
    always_comb begin
        automatic logic [31:0] next_c = field_storage.apb_out.pdata.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.apb_out.pdata.next;
        load_next_c = '1;
        field_combo.apb_out.pdata.next = next_c;
        field_combo.apb_out.pdata.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_out.pdata.value <= 32'h0;
        end else if(field_combo.apb_out.pdata.load_next) begin
            field_storage.apb_out.pdata.value <= field_combo.apb_out.pdata.next;
        end
    end
    assign hwif_out.apb_out.pdata.value = field_storage.apb_out.pdata.value;
    // Field: caliptra_fpga_sync_regs.apb_out.pready
    always_comb begin
        automatic logic [0:0] next_c = field_storage.apb_out.pready.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.apb_out.pready.next;
        load_next_c = '1;
        field_combo.apb_out.pready.next = next_c;
        field_combo.apb_out.pready.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_out.pready.value <= 1'h0;
        end else if(field_combo.apb_out.pready.load_next) begin
            field_storage.apb_out.pready.value <= field_combo.apb_out.pready.next;
        end
    end
    assign hwif_out.apb_out.pready.value = field_storage.apb_out.pready.value;
    // Field: caliptra_fpga_sync_regs.apb_out.pslverr
    always_comb begin
        automatic logic [0:0] next_c = field_storage.apb_out.pslverr.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.apb_out.pslverr.next;
        load_next_c = '1;
        field_combo.apb_out.pslverr.next = next_c;
        field_combo.apb_out.pslverr.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.apb_out.pslverr.value <= 1'h0;
        end else if(field_combo.apb_out.pslverr.load_next) begin
            field_storage.apb_out.pslverr.value <= field_combo.apb_out.pslverr.next;
        end
    end
    assign hwif_out.apb_out.pslverr.value = field_storage.apb_out.pslverr.value;
    // Field: caliptra_fpga_sync_regs.jtag_in.tck
    always_comb begin
        automatic logic [0:0] next_c = field_storage.jtag_in.tck.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.jtag_in && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.jtag_in.tck.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.jtag_in.tck.next = next_c;
        field_combo.jtag_in.tck.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.jtag_in.tck.value <= 1'h0;
        end else if(field_combo.jtag_in.tck.load_next) begin
            field_storage.jtag_in.tck.value <= field_combo.jtag_in.tck.next;
        end
    end
    assign hwif_out.jtag_in.tck.value = field_storage.jtag_in.tck.value;
    // Field: caliptra_fpga_sync_regs.jtag_in.tms
    always_comb begin
        automatic logic [0:0] next_c = field_storage.jtag_in.tms.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.jtag_in && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.jtag_in.tms.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.jtag_in.tms.next = next_c;
        field_combo.jtag_in.tms.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.jtag_in.tms.value <= 1'h0;
        end else if(field_combo.jtag_in.tms.load_next) begin
            field_storage.jtag_in.tms.value <= field_combo.jtag_in.tms.next;
        end
    end
    assign hwif_out.jtag_in.tms.value = field_storage.jtag_in.tms.value;
    // Field: caliptra_fpga_sync_regs.jtag_in.tdi
    always_comb begin
        automatic logic [0:0] next_c = field_storage.jtag_in.tdi.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.jtag_in && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.jtag_in.tdi.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.jtag_in.tdi.next = next_c;
        field_combo.jtag_in.tdi.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.jtag_in.tdi.value <= 1'h0;
        end else if(field_combo.jtag_in.tdi.load_next) begin
            field_storage.jtag_in.tdi.value <= field_combo.jtag_in.tdi.next;
        end
    end
    assign hwif_out.jtag_in.tdi.value = field_storage.jtag_in.tdi.value;
    // Field: caliptra_fpga_sync_regs.jtag_in.trst_n
    always_comb begin
        automatic logic [0:0] next_c = field_storage.jtag_in.trst_n.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.jtag_in && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.jtag_in.trst_n.value & ~decoded_wr_biten[3:3]) | (decoded_wr_data[3:3] & decoded_wr_biten[3:3]);
            load_next_c = '1;
        end
        field_combo.jtag_in.trst_n.next = next_c;
        field_combo.jtag_in.trst_n.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.jtag_in.trst_n.value <= 1'h0;
        end else if(field_combo.jtag_in.trst_n.load_next) begin
            field_storage.jtag_in.trst_n.value <= field_combo.jtag_in.trst_n.next;
        end
    end
    assign hwif_out.jtag_in.trst_n.value = field_storage.jtag_in.trst_n.value;
    // Field: caliptra_fpga_sync_regs.jtag_out.tdo
    always_comb begin
        automatic logic [0:0] next_c = field_storage.jtag_out.tdo.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.jtag_out.tdo.next;
        load_next_c = '1;
        field_combo.jtag_out.tdo.next = next_c;
        field_combo.jtag_out.tdo.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.jtag_out.tdo.value <= 1'h0;
        end else if(field_combo.jtag_out.tdo.load_next) begin
            field_storage.jtag_out.tdo.value <= field_combo.jtag_out.tdo.next;
        end
    end
    assign hwif_out.jtag_out.tdo.value = field_storage.jtag_out.tdo.value;
    // Field: caliptra_fpga_sync_regs.generic_input_wires.value
    always_comb begin
        automatic logic [63:0] next_c = field_storage.generic_input_wires.value.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.generic_input_wires && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.generic_input_wires.value.value & ~decoded_wr_biten[63:0]) | (decoded_wr_data[63:0] & decoded_wr_biten[63:0]);
            load_next_c = '1;
        end
        field_combo.generic_input_wires.value.next = next_c;
        field_combo.generic_input_wires.value.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.generic_input_wires.value.value <= 64'h0;
        end else if(field_combo.generic_input_wires.value.load_next) begin
            field_storage.generic_input_wires.value.value <= field_combo.generic_input_wires.value.next;
        end
    end
    assign hwif_out.generic_input_wires.value.value = field_storage.generic_input_wires.value.value;
    // Field: caliptra_fpga_sync_regs.generic_output_wires.value
    always_comb begin
        automatic logic [63:0] next_c = field_storage.generic_output_wires.value.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.generic_output_wires.value.next;
        load_next_c = '1;
        field_combo.generic_output_wires.value.next = next_c;
        field_combo.generic_output_wires.value.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.generic_output_wires.value.value <= 64'h0;
        end else if(field_combo.generic_output_wires.value.load_next) begin
            field_storage.generic_output_wires.value.value <= field_combo.generic_output_wires.value.next;
        end
    end
    assign hwif_out.generic_output_wires.value.value = field_storage.generic_output_wires.value.value;
    for(genvar i0=0; i0<4; i0++) begin
        // Field: caliptra_fpga_sync_regs.cptra_obf_key[].value
        always_comb begin
            automatic logic [63:0] next_c = field_storage.cptra_obf_key[i0].value.value;
            automatic logic load_next_c = '0;
            if(decoded_reg_strb.cptra_obf_key[i0] && decoded_req_is_wr) begin // SW write
                next_c = (field_storage.cptra_obf_key[i0].value.value & ~decoded_wr_biten[63:0]) | (decoded_wr_data[63:0] & decoded_wr_biten[63:0]);
                load_next_c = '1;
            end
            field_combo.cptra_obf_key[i0].value.next = next_c;
            field_combo.cptra_obf_key[i0].value.load_next = load_next_c;
        end
        always_ff @(posedge clk) begin
            if(rst) begin
                field_storage.cptra_obf_key[i0].value.value <= 64'h0;
            end else if(field_combo.cptra_obf_key[i0].value.load_next) begin
                field_storage.cptra_obf_key[i0].value.value <= field_combo.cptra_obf_key[i0].value.next;
            end
        end
        assign hwif_out.cptra_obf_key[i0].value.value = field_storage.cptra_obf_key[i0].value.value;
    end
    // Field: caliptra_fpga_sync_regs.control.cptra_pwrgood
    always_comb begin
        automatic logic [0:0] next_c = field_storage.control.cptra_pwrgood.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.control.cptra_pwrgood.value & ~decoded_wr_biten[0:0]) | (decoded_wr_data[0:0] & decoded_wr_biten[0:0]);
            load_next_c = '1;
        end
        field_combo.control.cptra_pwrgood.next = next_c;
        field_combo.control.cptra_pwrgood.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.control.cptra_pwrgood.value <= 1'h0;
        end else if(field_combo.control.cptra_pwrgood.load_next) begin
            field_storage.control.cptra_pwrgood.value <= field_combo.control.cptra_pwrgood.next;
        end
    end
    assign hwif_out.control.cptra_pwrgood.value = field_storage.control.cptra_pwrgood.value;
    // Field: caliptra_fpga_sync_regs.control.cptra_rst_b
    always_comb begin
        automatic logic [0:0] next_c = field_storage.control.cptra_rst_b.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.control.cptra_rst_b.value & ~decoded_wr_biten[1:1]) | (decoded_wr_data[1:1] & decoded_wr_biten[1:1]);
            load_next_c = '1;
        end
        field_combo.control.cptra_rst_b.next = next_c;
        field_combo.control.cptra_rst_b.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.control.cptra_rst_b.value <= 1'h0;
        end else if(field_combo.control.cptra_rst_b.load_next) begin
            field_storage.control.cptra_rst_b.value <= field_combo.control.cptra_rst_b.next;
        end
    end
    assign hwif_out.control.cptra_rst_b.value = field_storage.control.cptra_rst_b.value;
    // Field: caliptra_fpga_sync_regs.control.ss_debug_locked
    always_comb begin
        automatic logic [0:0] next_c = field_storage.control.ss_debug_locked.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.control.ss_debug_locked.value & ~decoded_wr_biten[2:2]) | (decoded_wr_data[2:2] & decoded_wr_biten[2:2]);
            load_next_c = '1;
        end
        field_combo.control.ss_debug_locked.next = next_c;
        field_combo.control.ss_debug_locked.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.control.ss_debug_locked.load_next) begin
            field_storage.control.ss_debug_locked.value <= field_combo.control.ss_debug_locked.next;
        end
    end
    assign hwif_out.control.ss_debug_locked.value = field_storage.control.ss_debug_locked.value;
    // Field: caliptra_fpga_sync_regs.control.ss_device_lifecycle
    always_comb begin
        automatic logic [1:0] next_c = field_storage.control.ss_device_lifecycle.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.control.ss_device_lifecycle.value & ~decoded_wr_biten[4:3]) | (decoded_wr_data[4:3] & decoded_wr_biten[4:3]);
            load_next_c = '1;
        end
        field_combo.control.ss_device_lifecycle.next = next_c;
        field_combo.control.ss_device_lifecycle.load_next = load_next_c;
    end

    always_ff @(posedge clk) begin
        if(field_combo.control.ss_device_lifecycle.load_next) begin
            field_storage.control.ss_device_lifecycle.value <= field_combo.control.ss_device_lifecycle.next;
        end
    end
    assign hwif_out.control.ss_device_lifecycle.value = field_storage.control.ss_device_lifecycle.value;
    // Field: caliptra_fpga_sync_regs.control.scan_mode
    always_comb begin
        automatic logic [0:0] next_c = field_storage.control.scan_mode.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.control.scan_mode.value & ~decoded_wr_biten[5:5]) | (decoded_wr_data[5:5] & decoded_wr_biten[5:5]);
            load_next_c = '1;
        end
        field_combo.control.scan_mode.next = next_c;
        field_combo.control.scan_mode.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.control.scan_mode.value <= 1'h0;
        end else if(field_combo.control.scan_mode.load_next) begin
            field_storage.control.scan_mode.value <= field_combo.control.scan_mode.next;
        end
    end
    assign hwif_out.control.scan_mode.value = field_storage.control.scan_mode.value;
    // Field: caliptra_fpga_sync_regs.control.bootfsm_brkpoint
    always_comb begin
        automatic logic [0:0] next_c = field_storage.control.bootfsm_brkpoint.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.control.bootfsm_brkpoint.value & ~decoded_wr_biten[6:6]) | (decoded_wr_data[6:6] & decoded_wr_biten[6:6]);
            load_next_c = '1;
        end
        field_combo.control.bootfsm_brkpoint.next = next_c;
        field_combo.control.bootfsm_brkpoint.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.control.bootfsm_brkpoint.value <= 1'h0;
        end else if(field_combo.control.bootfsm_brkpoint.load_next) begin
            field_storage.control.bootfsm_brkpoint.value <= field_combo.control.bootfsm_brkpoint.next;
        end
    end
    assign hwif_out.control.bootfsm_brkpoint.value = field_storage.control.bootfsm_brkpoint.value;
    // Field: caliptra_fpga_sync_regs.status.cptra_error_fatal
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.cptra_error_fatal.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.cptra_error_fatal.next;
        load_next_c = '1;
        field_combo.status.cptra_error_fatal.next = next_c;
        field_combo.status.cptra_error_fatal.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.cptra_error_fatal.value <= 1'h0;
        end else if(field_combo.status.cptra_error_fatal.load_next) begin
            field_storage.status.cptra_error_fatal.value <= field_combo.status.cptra_error_fatal.next;
        end
    end
    assign hwif_out.status.cptra_error_fatal.value = field_storage.status.cptra_error_fatal.value;
    // Field: caliptra_fpga_sync_regs.status.cptra_error_non_fatal
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.cptra_error_non_fatal.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.cptra_error_non_fatal.next;
        load_next_c = '1;
        field_combo.status.cptra_error_non_fatal.next = next_c;
        field_combo.status.cptra_error_non_fatal.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.cptra_error_non_fatal.value <= 1'h0;
        end else if(field_combo.status.cptra_error_non_fatal.load_next) begin
            field_storage.status.cptra_error_non_fatal.value <= field_combo.status.cptra_error_non_fatal.next;
        end
    end
    assign hwif_out.status.cptra_error_non_fatal.value = field_storage.status.cptra_error_non_fatal.value;
    // Field: caliptra_fpga_sync_regs.status.ready_for_fuses
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.ready_for_fuses.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.ready_for_fuses.next;
        load_next_c = '1;
        field_combo.status.ready_for_fuses.next = next_c;
        field_combo.status.ready_for_fuses.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.ready_for_fuses.value <= 1'h0;
        end else if(field_combo.status.ready_for_fuses.load_next) begin
            field_storage.status.ready_for_fuses.value <= field_combo.status.ready_for_fuses.next;
        end
    end
    assign hwif_out.status.ready_for_fuses.value = field_storage.status.ready_for_fuses.value;
    // Field: caliptra_fpga_sync_regs.status.ready_for_fw_push
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.ready_for_fw_push.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.ready_for_fw_push.next;
        load_next_c = '1;
        field_combo.status.ready_for_fw_push.next = next_c;
        field_combo.status.ready_for_fw_push.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.ready_for_fw_push.value <= 1'h0;
        end else if(field_combo.status.ready_for_fw_push.load_next) begin
            field_storage.status.ready_for_fw_push.value <= field_combo.status.ready_for_fw_push.next;
        end
    end
    assign hwif_out.status.ready_for_fw_push.value = field_storage.status.ready_for_fw_push.value;
    // Field: caliptra_fpga_sync_regs.status.ready_for_runtime
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.ready_for_runtime.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.ready_for_runtime.next;
        load_next_c = '1;
        field_combo.status.ready_for_runtime.next = next_c;
        field_combo.status.ready_for_runtime.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.ready_for_runtime.value <= 1'h0;
        end else if(field_combo.status.ready_for_runtime.load_next) begin
            field_storage.status.ready_for_runtime.value <= field_combo.status.ready_for_runtime.next;
        end
    end
    assign hwif_out.status.ready_for_runtime.value = field_storage.status.ready_for_runtime.value;
    // Field: caliptra_fpga_sync_regs.status.mailbox_data_avail
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.mailbox_data_avail.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.mailbox_data_avail.next;
        load_next_c = '1;
        field_combo.status.mailbox_data_avail.next = next_c;
        field_combo.status.mailbox_data_avail.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.mailbox_data_avail.value <= 1'h0;
        end else if(field_combo.status.mailbox_data_avail.load_next) begin
            field_storage.status.mailbox_data_avail.value <= field_combo.status.mailbox_data_avail.next;
        end
    end
    assign hwif_out.status.mailbox_data_avail.value = field_storage.status.mailbox_data_avail.value;
    // Field: caliptra_fpga_sync_regs.status.mailbox_flow_done
    always_comb begin
        automatic logic [0:0] next_c = field_storage.status.mailbox_flow_done.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.status.mailbox_flow_done.next;
        load_next_c = '1;
        field_combo.status.mailbox_flow_done.next = next_c;
        field_combo.status.mailbox_flow_done.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.status.mailbox_flow_done.value <= 1'h0;
        end else if(field_combo.status.mailbox_flow_done.load_next) begin
            field_storage.status.mailbox_flow_done.value <= field_combo.status.mailbox_flow_done.next;
        end
    end
    assign hwif_out.status.mailbox_flow_done.value = field_storage.status.mailbox_flow_done.value;
    // Field: caliptra_fpga_sync_regs.trng_in.itrng_data
    always_comb begin
        automatic logic [3:0] next_c = field_storage.trng_in.itrng_data.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.trng_in && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.trng_in.itrng_data.value & ~decoded_wr_biten[3:0]) | (decoded_wr_data[3:0] & decoded_wr_biten[3:0]);
            load_next_c = '1;
        end
        field_combo.trng_in.itrng_data.next = next_c;
        field_combo.trng_in.itrng_data.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.trng_in.itrng_data.value <= 4'h0;
        end else if(field_combo.trng_in.itrng_data.load_next) begin
            field_storage.trng_in.itrng_data.value <= field_combo.trng_in.itrng_data.next;
        end
    end
    assign hwif_out.trng_in.itrng_data.value = field_storage.trng_in.itrng_data.value;
    // Field: caliptra_fpga_sync_regs.trng_in.itrng_valid
    always_comb begin
        automatic logic [0:0] next_c = field_storage.trng_in.itrng_valid.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.trng_in && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.trng_in.itrng_valid.value & ~decoded_wr_biten[4:4]) | (decoded_wr_data[4:4] & decoded_wr_biten[4:4]);
            load_next_c = '1;
        end
        field_combo.trng_in.itrng_valid.next = next_c;
        field_combo.trng_in.itrng_valid.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.trng_in.itrng_valid.value <= 1'h0;
        end else if(field_combo.trng_in.itrng_valid.load_next) begin
            field_storage.trng_in.itrng_valid.value <= field_combo.trng_in.itrng_valid.next;
        end
    end
    assign hwif_out.trng_in.itrng_valid.value = field_storage.trng_in.itrng_valid.value;
    // Field: caliptra_fpga_sync_regs.trng_out.etrng_req
    always_comb begin
        automatic logic [0:0] next_c = field_storage.trng_out.etrng_req.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.trng_out.etrng_req.next;
        load_next_c = '1;
        field_combo.trng_out.etrng_req.next = next_c;
        field_combo.trng_out.etrng_req.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.trng_out.etrng_req.value <= 1'h0;
        end else if(field_combo.trng_out.etrng_req.load_next) begin
            field_storage.trng_out.etrng_req.value <= field_combo.trng_out.etrng_req.next;
        end
    end
    assign hwif_out.trng_out.etrng_req.value = field_storage.trng_out.etrng_req.value;
    // Field: caliptra_fpga_sync_regs.clock_control.cycle_count
    always_comb begin
        automatic logic [31:0] next_c = field_storage.clock_control.cycle_count.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.clock_control && decoded_req_is_wr) begin // SW write
            next_c = (field_storage.clock_control.cycle_count.value & ~decoded_wr_biten[31:0]) | (decoded_wr_data[31:0] & decoded_wr_biten[31:0]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.clock_control.cycle_count.next;
            load_next_c = '1;
        end
        field_combo.clock_control.cycle_count.next = next_c;
        field_combo.clock_control.cycle_count.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.clock_control.cycle_count.value <= 32'h0;
        end else if(field_combo.clock_control.cycle_count.load_next) begin
            field_storage.clock_control.cycle_count.value <= field_combo.clock_control.cycle_count.next;
        end
    end
    assign hwif_out.clock_control.cycle_count.value = field_storage.clock_control.cycle_count.value;
    // Field: caliptra_fpga_sync_regs.clock_control.go
    always_comb begin
        automatic logic [0:0] next_c = field_storage.clock_control.go.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.clock_control && decoded_req_is_wr) begin // SW write 1 set
            next_c = field_storage.clock_control.go.value | (decoded_wr_data[32:32] & decoded_wr_biten[32:32]);
            load_next_c = '1;
        end else begin // HW Write
            next_c = hwif_in.clock_control.go.next;
            load_next_c = '1;
        end
        field_combo.clock_control.go.next = next_c;
        field_combo.clock_control.go.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.clock_control.go.value <= 1'h0;
        end else if(field_combo.clock_control.go.load_next) begin
            field_storage.clock_control.go.value <= field_combo.clock_control.go.next;
        end
    end
    assign hwif_out.clock_control.go.value = field_storage.clock_control.go.value;
    assign hwif_out.clock_control.go.swmod = decoded_reg_strb.clock_control && decoded_req_is_wr;
    // Field: caliptra_fpga_sync_regs.clock_control.bkpt_generic_output_wires
    always_comb begin
        automatic logic [0:0] next_c = field_storage.clock_control.bkpt_generic_output_wires.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.clock_control && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.clock_control.bkpt_generic_output_wires.value & ~(decoded_wr_data[33:33] & decoded_wr_biten[33:33]);
            load_next_c = '1;
        end else if(hwif_in.clock_control.bkpt_generic_output_wires.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.clock_control.bkpt_generic_output_wires.next = next_c;
        field_combo.clock_control.bkpt_generic_output_wires.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.clock_control.bkpt_generic_output_wires.value <= 1'h0;
        end else if(field_combo.clock_control.bkpt_generic_output_wires.load_next) begin
            field_storage.clock_control.bkpt_generic_output_wires.value <= field_combo.clock_control.bkpt_generic_output_wires.next;
        end
    end
    assign hwif_out.clock_control.bkpt_generic_output_wires.value = field_storage.clock_control.bkpt_generic_output_wires.value;
    // Field: caliptra_fpga_sync_regs.clock_control.bkpt_mailbox_data_avail
    always_comb begin
        automatic logic [0:0] next_c = field_storage.clock_control.bkpt_mailbox_data_avail.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.clock_control && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.clock_control.bkpt_mailbox_data_avail.value & ~(decoded_wr_data[34:34] & decoded_wr_biten[34:34]);
            load_next_c = '1;
        end else if(hwif_in.clock_control.bkpt_mailbox_data_avail.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.clock_control.bkpt_mailbox_data_avail.next = next_c;
        field_combo.clock_control.bkpt_mailbox_data_avail.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.clock_control.bkpt_mailbox_data_avail.value <= 1'h0;
        end else if(field_combo.clock_control.bkpt_mailbox_data_avail.load_next) begin
            field_storage.clock_control.bkpt_mailbox_data_avail.value <= field_combo.clock_control.bkpt_mailbox_data_avail.next;
        end
    end
    assign hwif_out.clock_control.bkpt_mailbox_data_avail.value = field_storage.clock_control.bkpt_mailbox_data_avail.value;
    // Field: caliptra_fpga_sync_regs.clock_control.bkpt_mailbox_flow_done
    always_comb begin
        automatic logic [0:0] next_c = field_storage.clock_control.bkpt_mailbox_flow_done.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.clock_control && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.clock_control.bkpt_mailbox_flow_done.value & ~(decoded_wr_data[35:35] & decoded_wr_biten[35:35]);
            load_next_c = '1;
        end else if(hwif_in.clock_control.bkpt_mailbox_flow_done.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.clock_control.bkpt_mailbox_flow_done.next = next_c;
        field_combo.clock_control.bkpt_mailbox_flow_done.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.clock_control.bkpt_mailbox_flow_done.value <= 1'h0;
        end else if(field_combo.clock_control.bkpt_mailbox_flow_done.load_next) begin
            field_storage.clock_control.bkpt_mailbox_flow_done.value <= field_combo.clock_control.bkpt_mailbox_flow_done.next;
        end
    end
    assign hwif_out.clock_control.bkpt_mailbox_flow_done.value = field_storage.clock_control.bkpt_mailbox_flow_done.value;
    // Field: caliptra_fpga_sync_regs.clock_control.bkpt_etrng_req
    always_comb begin
        automatic logic [0:0] next_c = field_storage.clock_control.bkpt_etrng_req.value;
        automatic logic load_next_c = '0;
        if(decoded_reg_strb.clock_control && decoded_req_is_wr) begin // SW write 1 clear
            next_c = field_storage.clock_control.bkpt_etrng_req.value & ~(decoded_wr_data[36:36] & decoded_wr_biten[36:36]);
            load_next_c = '1;
        end else if(hwif_in.clock_control.bkpt_etrng_req.hwset) begin // HW Set
            next_c = '1;
            load_next_c = '1;
        end
        field_combo.clock_control.bkpt_etrng_req.next = next_c;
        field_combo.clock_control.bkpt_etrng_req.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.clock_control.bkpt_etrng_req.value <= 1'h0;
        end else if(field_combo.clock_control.bkpt_etrng_req.load_next) begin
            field_storage.clock_control.bkpt_etrng_req.value <= field_combo.clock_control.bkpt_etrng_req.next;
        end
    end
    assign hwif_out.clock_control.bkpt_etrng_req.value = field_storage.clock_control.bkpt_etrng_req.value;
    // Field: caliptra_fpga_sync_regs.counter.counter
    always_comb begin
        automatic logic [63:0] next_c = field_storage.counter.counter.value;
        automatic logic load_next_c = '0;
        
        // HW Write
        next_c = hwif_in.counter.counter.next;
        load_next_c = '1;
        field_combo.counter.counter.next = next_c;
        field_combo.counter.counter.load_next = load_next_c;
    end
    always_ff @(posedge clk) begin
        if(rst) begin
            field_storage.counter.counter.value <= 64'h0;
        end else if(field_combo.counter.counter.load_next) begin
            field_storage.counter.counter.value <= field_combo.counter.counter.next;
        end
    end
    assign hwif_out.counter.counter.value = field_storage.counter.counter.value;
    assign hwif_out.rom_mem.req = decoded_reg_strb.rom_mem;
    assign hwif_out.rom_mem.addr = decoded_addr[15:0];
    assign hwif_out.rom_mem.req_is_wr = decoded_req_is_wr;
    assign hwif_out.rom_mem.wr_data = decoded_wr_data;
    assign hwif_out.rom_mem.wr_biten = decoded_wr_biten;

    //--------------------------------------------------------------------------
    // Write response
    //--------------------------------------------------------------------------
    always_comb begin
        automatic logic wr_ack;
        wr_ack = '0;
        wr_ack |= hwif_in.rom_mem.wr_ack;
        external_wr_ack = wr_ack;
    end
    assign cpuif_wr_ack = external_wr_ack | (decoded_req & decoded_req_is_wr & ~decoded_strb_is_external);
    // Writes are always granted with no error response
    assign cpuif_wr_err = '0;

    //--------------------------------------------------------------------------
    // Readback
    //--------------------------------------------------------------------------
    logic readback_external_rd_ack_c;
    always_comb begin
        automatic logic rd_ack;
        rd_ack = '0;
        rd_ack |= hwif_in.rom_mem.rd_ack;
        readback_external_rd_ack_c = rd_ack;
    end

    logic readback_external_rd_ack;

    assign readback_external_rd_ack = readback_external_rd_ack_c;

    logic readback_err;
    logic readback_done;
    logic [63:0] readback_data;
    
    // Assign readback values to a flattened array
    logic [63:0] readback_array[18];
    assign readback_array[0][31:0] = (decoded_reg_strb.apb_in0 && !decoded_req_is_wr) ? field_storage.apb_in0.pdata.value : '0;
    assign readback_array[0][63:32] = (decoded_reg_strb.apb_in0 && !decoded_req_is_wr) ? field_storage.apb_in0.paddr.value : '0;
    assign readback_array[1][0:0] = (decoded_reg_strb.apb_in1 && !decoded_req_is_wr) ? field_storage.apb_in1.psel.value : '0;
    assign readback_array[1][1:1] = (decoded_reg_strb.apb_in1 && !decoded_req_is_wr) ? field_storage.apb_in1.penable.value : '0;
    assign readback_array[1][2:2] = (decoded_reg_strb.apb_in1 && !decoded_req_is_wr) ? field_storage.apb_in1.pwrite.value : '0;
    assign readback_array[1][5:3] = (decoded_reg_strb.apb_in1 && !decoded_req_is_wr) ? field_storage.apb_in1.pprot.value : '0;
    assign readback_array[1][31:6] = '0;
    assign readback_array[1][63:32] = (decoded_reg_strb.apb_in1 && !decoded_req_is_wr) ? field_storage.apb_in1.pauser.value : '0;
    assign readback_array[2][31:0] = (decoded_reg_strb.apb_out && !decoded_req_is_wr) ? field_storage.apb_out.pdata.value : '0;
    assign readback_array[2][32:32] = (decoded_reg_strb.apb_out && !decoded_req_is_wr) ? field_storage.apb_out.pready.value : '0;
    assign readback_array[2][33:33] = (decoded_reg_strb.apb_out && !decoded_req_is_wr) ? field_storage.apb_out.pslverr.value : '0;
    assign readback_array[2][63:34] = '0;
    assign readback_array[3][0:0] = (decoded_reg_strb.jtag_in && !decoded_req_is_wr) ? field_storage.jtag_in.tck.value : '0;
    assign readback_array[3][1:1] = (decoded_reg_strb.jtag_in && !decoded_req_is_wr) ? field_storage.jtag_in.tms.value : '0;
    assign readback_array[3][2:2] = (decoded_reg_strb.jtag_in && !decoded_req_is_wr) ? field_storage.jtag_in.tdi.value : '0;
    assign readback_array[3][3:3] = (decoded_reg_strb.jtag_in && !decoded_req_is_wr) ? field_storage.jtag_in.trst_n.value : '0;
    assign readback_array[3][63:4] = '0;
    assign readback_array[4][0:0] = (decoded_reg_strb.jtag_out && !decoded_req_is_wr) ? field_storage.jtag_out.tdo.value : '0;
    assign readback_array[4][63:1] = '0;
    assign readback_array[5][63:0] = (decoded_reg_strb.generic_input_wires && !decoded_req_is_wr) ? field_storage.generic_input_wires.value.value : '0;
    assign readback_array[6][63:0] = (decoded_reg_strb.generic_output_wires && !decoded_req_is_wr) ? field_storage.generic_output_wires.value.value : '0;
    for(genvar i0=0; i0<4; i0++) begin
        assign readback_array[i0*1 + 7][63:0] = (decoded_reg_strb.cptra_obf_key[i0] && !decoded_req_is_wr) ? field_storage.cptra_obf_key[i0].value.value : '0;
    end
    assign readback_array[11][0:0] = (decoded_reg_strb.control && !decoded_req_is_wr) ? field_storage.control.cptra_pwrgood.value : '0;
    assign readback_array[11][1:1] = (decoded_reg_strb.control && !decoded_req_is_wr) ? field_storage.control.cptra_rst_b.value : '0;
    assign readback_array[11][2:2] = (decoded_reg_strb.control && !decoded_req_is_wr) ? field_storage.control.ss_debug_locked.value : '0;
    assign readback_array[11][4:3] = (decoded_reg_strb.control && !decoded_req_is_wr) ? field_storage.control.ss_device_lifecycle.value : '0;
    assign readback_array[11][5:5] = (decoded_reg_strb.control && !decoded_req_is_wr) ? field_storage.control.scan_mode.value : '0;
    assign readback_array[11][6:6] = (decoded_reg_strb.control && !decoded_req_is_wr) ? field_storage.control.bootfsm_brkpoint.value : '0;
    assign readback_array[11][63:7] = '0;
    assign readback_array[12][0:0] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.cptra_error_fatal.value : '0;
    assign readback_array[12][1:1] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.cptra_error_non_fatal.value : '0;
    assign readback_array[12][2:2] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.ready_for_fuses.value : '0;
    assign readback_array[12][3:3] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.ready_for_fw_push.value : '0;
    assign readback_array[12][4:4] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.ready_for_runtime.value : '0;
    assign readback_array[12][5:5] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.mailbox_data_avail.value : '0;
    assign readback_array[12][6:6] = (decoded_reg_strb.status && !decoded_req_is_wr) ? field_storage.status.mailbox_flow_done.value : '0;
    assign readback_array[12][63:7] = '0;
    assign readback_array[13][3:0] = (decoded_reg_strb.trng_in && !decoded_req_is_wr) ? field_storage.trng_in.itrng_data.value : '0;
    assign readback_array[13][4:4] = (decoded_reg_strb.trng_in && !decoded_req_is_wr) ? field_storage.trng_in.itrng_valid.value : '0;
    assign readback_array[13][63:5] = '0;
    assign readback_array[14][0:0] = (decoded_reg_strb.trng_out && !decoded_req_is_wr) ? field_storage.trng_out.etrng_req.value : '0;
    assign readback_array[14][63:1] = '0;
    assign readback_array[15][31:0] = (decoded_reg_strb.clock_control && !decoded_req_is_wr) ? field_storage.clock_control.cycle_count.value : '0;
    assign readback_array[15][32:32] = (decoded_reg_strb.clock_control && !decoded_req_is_wr) ? field_storage.clock_control.go.value : '0;
    assign readback_array[15][33:33] = (decoded_reg_strb.clock_control && !decoded_req_is_wr) ? field_storage.clock_control.bkpt_generic_output_wires.value : '0;
    assign readback_array[15][34:34] = (decoded_reg_strb.clock_control && !decoded_req_is_wr) ? field_storage.clock_control.bkpt_mailbox_data_avail.value : '0;
    assign readback_array[15][35:35] = (decoded_reg_strb.clock_control && !decoded_req_is_wr) ? field_storage.clock_control.bkpt_mailbox_flow_done.value : '0;
    assign readback_array[15][36:36] = (decoded_reg_strb.clock_control && !decoded_req_is_wr) ? field_storage.clock_control.bkpt_etrng_req.value : '0;
    assign readback_array[15][63:37] = '0;
    assign readback_array[16][63:0] = (decoded_reg_strb.counter && !decoded_req_is_wr) ? field_storage.counter.counter.value : '0;
    assign readback_array[17] = hwif_in.rom_mem.rd_ack ? hwif_in.rom_mem.rd_data : '0;

    // Reduce the array
    always_comb begin
        automatic logic [63:0] readback_data_var;
        readback_done = decoded_req & ~decoded_req_is_wr & ~decoded_strb_is_external;
        readback_err = '0;
        readback_data_var = '0;
        for(int i=0; i<18; i++) readback_data_var |= readback_array[i];
        readback_data = readback_data_var;
    end

    assign external_rd_ack = readback_external_rd_ack;
    assign cpuif_rd_ack = readback_done | readback_external_rd_ack;
    assign cpuif_rd_data = readback_data;
    assign cpuif_rd_err = readback_err;
endmodule