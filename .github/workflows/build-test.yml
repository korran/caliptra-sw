# docs: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: Build and Test

on:
  push:
    branches: ["main"]
  pull_request:

  workflow_dispatch:

jobs:
  build_and_test:
    runs-on: ubuntu-20.04

    env:
      RUST_TOOLCHAIN_VERSION: 1.68.0
      CARGO_INCREMENTAL: 0
      SCCACHE_VERSION: 0.3.3
      SCCACHE_GHA_CACHE_TO: sccache-caliptra-sw
      SCCACHE_GHA_CACHE_FROM: sccache-caliptra-sw

      # Change this to a new random value if you suspect the cache is corrupted
      SCCACHE_C_CUSTOM_CACHE_BUSTER: da72b21e3a3d
      CARGO_CACHE_BUSTER: da72b21e3a3e

    steps:
      - uses: actions/checkout@v3

      - name: Restore Cargo index from cache
        uses: actions/cache/restore@v3
        id: cargo_index_restore
        with:
          path: ~/.cargo/registry/index
          key: cargo-index-${{ env.SCCACHE_C_CUSTOM_CACHE_BUSTER }}-${{ hashFiles('Cargo.lock') }}

      - name: Restore sccache binary
        uses: actions/cache/restore@v3
        id: sccache_bin_restore
        with:
          path: ~/.cargo/bin/sccache
          key: sccache-bin-${{ env.SCCACHE_VERSION }}-${{ env.SCCACHE_C_CUSTOM_CACHE_BUSTER }}

      - name: Install sccache
        if: steps.sccache_bin_restore.outputs.cache-hit != 'true'
        run: |
          cargo install sccache --version ${SCCACHE_VERSION} --no-default-features --features=gha

      # Save the sccache binary immediately so we can reuse it in future runs
      # even if the rest of the current run fails.
      - name: Save sccache binary
        uses: actions/cache/save@v3
        if: steps.sccache_bin_restore.outputs.cache-hit != 'true'
        with:
          path: ~/.cargo/bin/sccache
          key: ${{ steps.sccache_bin_restore.outputs.cache-primary-key }}

      - name: Configure sccache
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('RUSTC_WRAPPER', process.env.HOME + '/.cargo/bin/sccache');
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Set Rust ${{ env.RUST_TOOLCHAIN_VERSION }} as the default toolchain.
        run: |
          rustup default ${RUST_TOOLCHAIN_VERSION}
          rustup component add rustfmt clippy
          rustc --version
          cargo fmt --version
          cargo clippy --version

      - name: Install risv32imc target
        run: |
          rustup target add riscv32imc-unknown-none-elf

      - name: Run tests
        run: |
          export RUSTFLAGS="-D warnings"
          cargo test --release -p caliptra-test smoke_test
          sccache --show-stats

